{"version":3,"sources":["Components/Zoo/Zoo.js","App.js","serviceWorker.js","index.js"],"names":["Zoo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMouseMove","e","preventDefault","position","getCursorPosition","_this$state","state","imageWidth","imageHeight","lensWidth","lensHeight","cx","cy","x","y","setState","lensLeft","lensTop","resultX","resultY","_e$target$getBounding","target","getBoundingClientRect","left","top","pageX","pageY","hoverOn","hoverVisor","hoverOff","image","Number","width","height","_this$state2","hover","styleLens","concat","display","styleResult","backgroundImage","backgroundSize","backgroundPosition","react_default","a","createElement","className","onMouseEnter","onMouseLeave","style","src","alt","Component","App","Components_Zoo_Zoo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ee5da14.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Zoo.css';\r\n\r\nclass Zoo extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            image: this.props.image,\r\n            imageWidth: Number(this.props.width),\r\n            imageHeight: Number(this.props.height),\r\n            lensWidth: 260,\r\n            lensHeight: 260,\r\n            lensTop: 0,\r\n            lensLeft: 0,\r\n            resultX: 0,\r\n            resultY: 0,\r\n            cx: 520/260, // = 2\r\n            cy: 520/260,  // = 2  osea, la imagen va a ser agrandada el doble\r\n            hoverVisor: false\r\n        }\r\n    }\r\n\r\n    \r\n    onMouseMove = (e) => {\r\n        e.preventDefault();\r\n\r\n        let position = this.getCursorPosition(e);\r\n\r\n        const {\r\n            imageWidth,\r\n            imageHeight,\r\n            lensWidth,\r\n            lensHeight,\r\n            cx,\r\n            cy\r\n        } = this.state;\r\n\r\n        let x = position.x - (lensWidth / 2);\r\n        let y = position.y - (lensHeight / 2);\r\n\r\n        if (x > imageWidth - lensWidth) {\r\n            x = imageWidth - lensWidth;\r\n        }\r\n        if (x < 0) {\r\n            x = 0;\r\n        }\r\n        if (y > imageHeight - lensHeight) {\r\n            y = imageHeight - lensHeight;\r\n        }\r\n        if (y < 0) {\r\n            y = 0;\r\n        }\r\n\r\n        this.setState({\r\n            lensLeft: x,\r\n            lensTop: y,\r\n            resultX: x*cx,\r\n            resultY: y*cy\r\n        })\r\n        \r\n    }\r\n\r\n    getCursorPosition = (e) => {\r\n        let x = 0;\r\n        let y = 0;\r\n        \r\n        const { left, top } = e.target.getBoundingClientRect()\r\n        x = e.pageX - left;\r\n        y = e.pageY - top;\r\n        return {x : x, y : y};\r\n    }\r\n\r\n    hoverOn = (e) => {\r\n        this.setState({ hoverVisor: true });\r\n    }\r\n    hoverOff = (e) => {\r\n        this.setState({ hoverVisor: false });\r\n    }\r\n\r\n    render() {\r\n\r\n        const {\r\n            image,\r\n            imageWidth,\r\n            imageHeight,\r\n            lensTop,\r\n            lensLeft,\r\n            resultX,\r\n            resultY,\r\n            cx,\r\n            cy,\r\n            hoverVisor\r\n        } = this.state;\r\n\r\n        const hover = hoverVisor ? 'block' : 'none';\r\n\r\n        const styleLens = {\r\n            top: `${lensTop}px`,\r\n            left: `${lensLeft}px`,\r\n            display: hover\r\n        }\r\n\r\n        const styleResult = {\r\n            backgroundImage: `url(${image})`,\r\n            backgroundSize: `${imageWidth * cx}px ${imageHeight * cy}px`,\r\n            backgroundPosition : `-${resultX}px -${resultY}px`,\r\n            display: hover\r\n        }\r\n\r\n        \r\n        return (\r\n            <div className=\"zoo\">\r\n                <div className=\"zoo-content\">\r\n                    <div className=\"zoo-visor\" \r\n                        onMouseMove={this.onMouseMove} \r\n                        onMouseEnter={this.hoverOn}\r\n                        onMouseLeave={this.hoverOff}\r\n                        >\r\n                    </div>\r\n                    <div className=\"zoo-lens\" style={styleLens}></div>\r\n                    <img src={image} width={imageWidth} height={imageHeight} alt=\"\" />\r\n                </div>\r\n                <div className=\"zoo-result \" style={styleResult} ></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Zoo;","import React, { Component } from 'react';\nimport Zoo from './Components/Zoo/Zoo';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        <h1>Zoo - Simple Zoom (React)</h1>\n        <Zoo image=\"https://luismachain95.github.io/Caro/image/img.jpg\" width='500' height='500'/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}